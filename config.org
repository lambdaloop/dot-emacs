#+PROPERTY: header-args :tangle yes

* personal
  Who am I?
  #+begin_src emacs-lisp
    (setq user-full-name "Pierre Karashchuk"
          user-mail-address "krchtchk@gmail.com")
  #+end_src

* startup
I almost never use the *scratch* buffer. life.org is a good start
#+begin_src emacs-lisp
(setq initial-buffer-choice "~/Dropbox/org/life.org")
#+end_src

* customize file
  Set up the customize file to its own separate file, instead of saving

  #+begin_src emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file)
  #+end_src
* appearance
** basic appearance
#+begin_src emacs-lisp
(setq default-frame-alist '((font-backend . "xft")
                            (font . "DejaVu Sans Mono-10")
                            (vertical-scroll-bars)
                            (menu-bar-lines . 0)
                            (tool-bar-lines . 0)
                            ))
  (custom-set-faces
   '(variable-pitch ((t (:height 100 :width normal :family "Noto Sans")))))

  (setq-default cursor-type 'box)
  (blink-cursor-mode 0)
#+end_src

** theme functions
   From [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Daniel Mai]]
   #+begin_src emacs-lisp
     (defun switch-theme (theme)
       "Disables any currently active themes and loads THEME."
       ;; This interactive call is taken from `load-theme'
       (interactive
        (list
         (intern (completing-read "Load custom theme: "
                                  (mapc 'symbol-name
                                        (custom-available-themes))))))
       (let ((enabled-themes custom-enabled-themes))
         (mapc #'disable-theme custom-enabled-themes)
         (load-theme theme t)))

     (defun disable-active-themes ()
       "Disables any currently active themes listed in `custom-enabled-themes'."
       (interactive)
       (mapc #'disable-theme custom-enabled-themes))
   #+end_src

** current theme
   #+begin_src emacs-lisp
     (use-package color-theme-sanityinc-tomorrow
       :config (switch-theme 'sanityinc-tomorrow-eighties))
   #+end_src
* package config
  #+begin_src emacs-lisp
    (require 'package)
    (package-initialize)
    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))
  #+end_src
* ido
** enable ido + basic settings
   #+begin_src emacs-lisp
     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
     (setq ido-use-filename-at-point 'guess)
     (setq ido-use-url-at-point nil)
     (setq ido-file-extensions-order '(".org" ".txt" ".md" ".py" ".r" ".R" ".el"))
     (setq ido-default-buffer-method 'selected-window)
   #+end_src
** bookmark jump
   #+begin_src emacs-lisp
     (defun ido-bookmark-jump (bname)
       "*Switch to bookmark interactively using `ido'."
       (interactive (list (ido-completing-read "Bookmark: " (bookmark-all-names) nil t)))
       (bookmark-jump bname))

     (define-key global-map [remap bookmark-jump] 'ido-bookmark-jump)
   #+end_src
* misc packages
** smex
   #+begin_src emacs-lisp
     (use-package smex
       :bind ("M-x" . smex))
   #+end_src
** magit
   #+begin_src emacs-lisp
     (use-package magit
       :bind ("C-x g" . magit-status))
   #+end_src
** pdf-tools
   #+begin_src emacs-lisp
     (use-package pdf-tools
       :config (pdf-tools-install))
   #+end_src
** expand region
   #+begin_src emacs-lisp
     (use-package expand-region
       :bind* (("M-." . er/expand-region)))
       #+end_src
* keybindings
** ergonomic keys
   Based on ergoemacs key bindings, but adjusted for me
   I want to have movement using Ctrl+something

   #+begin_src emacs-lisp
     (define-key global-map [(control u)] ctl-x-map)
     (bind-keys
      ("C-o" . other-window)
      ("C-t" . previous-line)
      ("C-p" . (lambda () (interactive) (message "C-p is disabled. Use C-t to go up.")))
      ("M-u" . universal-argument)
      ("C-." . set-mark-command)
      ("M-[" . (lambda () (interactive) (execute-kbd-macro (kbd "M-{"))))
      ("M-]" . (lambda () (interactive) (execute-kbd-macro (kbd "M-}"))))
      )

     (bind-keys*
      ("M-h" . save-buffer))
   #+end_src

** misc keys
   #+begin_src emacs-lisp
     (bind-key "M-/" 'hippie-expand)

     (defun revert-buffer-no-confirm ()
       "Revert buffer without confirmation."
       (interactive) (revert-buffer t t))
     (bind-key "C-x C-r" 'revert-buffer-no-confirm)
   #+end_src
* sane defaults
  (Copied from [[https://github.com/danielmai/.emacs.d][Daniel Mai]])
  Let's start with some sane defaults, shall we?
  Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].
** misc
   #+begin_src emacs-lisp
     ;; These functions are useful. Activate them.
     (put 'downcase-region 'disabled nil)
     (put 'upcase-region 'disabled nil)
     (put 'narrow-to-region 'disabled nil)
     (put 'dired-find-alternate-file 'disabled nil)

     ;; Answering just 'y' or 'n' will do
     (defalias 'yes-or-no-p 'y-or-n-p)

     ;; Keep all backup and auto-save files in one directory
     (setq backup-directory-alist '(("." . "~/tmp/emacs-backups")))
     (setq auto-save-file-name-transforms '((".*" "~/tmp/auto-save-list/" t)))

     ;; UTF-8 please
     (setq locale-coding-system 'utf-8) ; pretty
     (set-terminal-coding-system 'utf-8) ; pretty
     (set-keyboard-coding-system 'utf-8) ; pretty
     (set-selection-coding-system 'utf-8) ; please
     (prefer-coding-system 'utf-8) ; with sugar on top
     (setq-default indent-tabs-mode nil)

     ;; Turn off the blinking cursor
     (blink-cursor-mode -1)

     (setq-default indent-tabs-mode nil)
     (setq-default indicate-empty-lines t)

     ;; Don't count two spaces after a period as the end of a sentence.
     ;; Just one space is needed.
     (setq sentence-end-double-space nil)

     ;; delete the region when typing, just like as we expect nowadays.
     (delete-selection-mode t)

     (show-paren-mode t)

     (column-number-mode t)

     (global-visual-line-mode)
     (diminish 'visual-line-mode)

     (setq uniquify-buffer-name-style 'forward)

     ;; Don't beep at me
     (setq visible-bell nil)

   #+end_src

** page breaks
   Here we make page-break characters look pretty, instead of appearing
   as =^L= in Emacs. [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][Here's an informative article called "Using
   Page-Breaks in GNU Emacs" by Eric J. M. Ritz.]]

   #+begin_src emacs-lisp
     (use-package page-break-lines
       :ensure t)
   #+end_src
* org mode
** org options
   #+begin_src emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+end_src
** todo
   #+begin_src emacs-lisp
     (setq org-todo-keywords
           '((sequence "NEXT(n!)" "TODO(t!)" "IN-PROGRESS(i!)" "WAITING(w@/!)"
                       "SOMEDAY(s)" "PROJECT(p)" "DELEGATED(l@/!)"
                       "|" "DONE(d)" "CANCELED(c)")
             (sequence "TO-READ(r@)" "READING(e)" "|" "READ(a)")
             ))
   #+end_src
** misc
   #+begin_src emacs-lisp
     ;; org archives are org files too!
     (add-to-list 'auto-mode-alist '("\\.org_archive\\'" . org-mode))

     ;; don't confirm when execute code blocks
     (setq org-confirm-babel-evaluate nil)
#+end_src

** spelling
   #+begin_src emacs-lisp
     (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
     (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
     (add-to-list 'ispell-skip-region-alist '("#\\+PROPERTY" . "\n"))
     (add-to-list 'ispell-skip-region-alist '("\\[\\[" . "\\]\\]"))
   #+end_src

** load languages
Languages which can be evaluated in Org buffers
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (latex . t)
   (python . t)
   (shell . t)))
#+end_src
* python
** ipython shell
#+begin_src emacs-lisp
  (use-package python
    :config
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "--simple-prompt -i"
          python-shell-completion-native-enable nil))
#+end_src
